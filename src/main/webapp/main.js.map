{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/angular-material.module.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/pages/footer/footer.component.css","webpack:///./src/app/pages/footer/footer.component.html","webpack:///./src/app/pages/footer/footer.component.ts","webpack:///./src/app/pages/header/header.component.css","webpack:///./src/app/pages/header/header.component.html","webpack:///./src/app/pages/header/header.component.ts","webpack:///./src/app/pages/security/login/login.component.css","webpack:///./src/app/pages/security/login/login.component.html","webpack:///./src/app/pages/security/login/login.component.ts","webpack:///./src/app/pages/security/registration/registration.component.css","webpack:///./src/app/pages/security/registration/registration.component.html","webpack:///./src/app/pages/security/registration/registration.component.ts","webpack:///./src/app/pages/user/add-user/add-user.component.css","webpack:///./src/app/pages/user/add-user/add-user.component.html","webpack:///./src/app/pages/user/add-user/add-user.component.ts","webpack:///./src/app/pages/user/edit-user/edit-user.component.css","webpack:///./src/app/pages/user/edit-user/edit-user.component.html","webpack:///./src/app/pages/user/edit-user/edit-user.component.ts","webpack:///./src/app/pages/user/list-user/list-user.component.css","webpack:///./src/app/pages/user/list-user/list-user.component.html","webpack:///./src/app/pages/user/list-user/list-user.component.ts","webpack:///./src/app/service/auth-guard.service.ts","webpack:///./src/app/service/auth.service.ts","webpack:///./src/app/service/user.service.ts","webpack:///./src/app/util/error-interceptor.ts","webpack:///./src/app/util/index.ts","webpack:///./src/app/util/patternValidator.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport {\n  MatToolbarModule,\n  MatButtonModule,\n  MatCardModule,\n  MatDialogModule,\n  MatInputModule,\n  MatTableModule,\n  MatIconModule,\n  MatMenuModule,\n  MatDividerModule,\n  MatCheckboxModule\n} from '@angular/material';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatInputModule,\n    MatTableModule,\n    MatIconModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatCheckboxModule\n  ],\n  exports: [\n    MatToolbarModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatInputModule,\n    MatTableModule,\n    MatIconModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatCheckboxModule\n  ]\n})\nexport class AngularMaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './pages/security/login/login.component';\nimport { AddUserComponent } from './pages/user/add-user/add-user.component';\nimport { ListUserComponent } from './pages/user/list-user/list-user.component';\nimport { EditUserComponent } from './pages/user/edit-user/edit-user.component';\nimport { RegistrationComponent } from './pages/security/registration/registration.component';\n\nimport { AuthGuardService } from './service/auth-guard.service';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegistrationComponent },\n  { path: 'add-user', component: AddUserComponent, canActivate: [AuthGuardService] },\n  { path: 'list-user', component: ListUserComponent, canActivate: [AuthGuardService] },\n  { path: 'edit-user', component: EditUserComponent, canActivate: [AuthGuardService] },\n  { path: '', component: LoginComponent, canActivate: [AuthGuardService] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ],\n  providers: [ AuthGuardService ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<section [class.alternate-theme]='isAlternateTheme'>\\n    <app-header></app-header>\\n    <router-outlet></router-outlet>\\n    <app-footer></app-footer>\\n</section>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'userapp';\n  isAlternateTheme = false;\n\n  toggleTheme() {\n    this.isAlternateTheme = !this.isAlternateTheme;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Injector, ErrorHandler } from '@angular/core';\n\nimport 'hammerjs';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './pages/security/login/login.component';\nimport { AddUserComponent } from './pages/user/add-user/add-user.component';\nimport { EditUserComponent } from './pages/user/edit-user/edit-user.component';\nimport { ListUserComponent } from './pages/user/list-user/list-user.component';\n\nimport { UserService } from './service/user.service';\n\nimport { ReactiveFormsModule } from '@angular/forms'; // bug fix\nimport { AngularMaterialModule } from './angular-material.module';\nimport { HeaderComponent } from './pages/header/header.component';\nimport { FooterComponent } from './pages/footer/footer.component'; \n\nimport { HttpClientModule } from '@angular/common/http';\nimport { RegistrationComponent } from './pages/security/registration/registration.component';\n\nimport { AuthService } from './service/auth.service';\nimport { httpInterceptorProviders } from './util/index';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    AddUserComponent,\n    EditUserComponent,\n    ListUserComponent,\n    HeaderComponent,\n    FooterComponent,\n    RegistrationComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    BrowserAnimationsModule, // bug fix\n    HttpClientModule    \n  ],\n  providers: [\n    UserService,\n    AuthService,\n    // { provide: ErrorHandler, useClass: ErrorsHandler },\n    httpInterceptorProviders\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Zvb3Rlci9mb290ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar class='primary'>\\n  <span class='spacer'></span>\\n  <div class='hint-msg'>\\n    © Copyright Angular-User-CRUD. {{buildDate | date:'yyyy'}}\\n  </div>  \\n  <span class='spacer'></span>\\n</mat-toolbar>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  buildDate;\n\n  constructor() {\n    this.buildDate = new Date();\n  }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar color='primary'>\\n  <mat-icon>home</mat-icon>\\n  <span class='spacer'></span>\\n  <span>Angular User CRUD</span>\\n  <span class='spacer'></span>\\n  <button mat-icon-button [matMenuTriggerFor]='menu'>\\n    <mat-icon><i class='material-icons'>view_headline</i></mat-icon>\\n  </button>\\n\\n  <mat-menu #menu='matMenu'>\\n    <button mat-menu-item routerLink='/login'>\\n      <mat-icon>home</mat-icon>\\n      <span>Login</span>\\n    </button>\\n    <button mat-menu-item routerLink='/list-user'>\\n      <mat-icon>list</mat-icon>\\n      <span>List Users</span>\\n    </button>\\n    <button mat-menu-item routerLink='/add-user'>\\n      <mat-icon>playlist_add</mat-icon>\\n      <span>Add User</span>\\n    </button>\\n    <button mat-menu-item routerLink='/register'>\\n      <mat-icon>spellcheck</mat-icon>\\n      <span>Register</span>\\n    </button>\\n    <button mat-menu-item routerLink='/login'>\\n      <mat-icon>settings_power</mat-icon>\\n      <span>Logout</span>\\n    </button>\\n    <button mat-menu-item (click)='toggleTheme()'>Toggle Theme</button>\\n  </mat-menu>\\n</mat-toolbar>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { AppComponent } from '../../app.component';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(private appComponent: AppComponent) {}\n\n  ngOnInit() {}\n\n  toggleTheme() {\n    this.appComponent.toggleTheme();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NlY3VyaXR5L2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div *ngIf='errorMsg' [ngClass]=\\\"{'error': errorMsg}\\\">\\n  {{errorMsg}}\\n</div>\\n\\n<mat-card>\\n  <mat-card-title align='center'>\\n    Login\\n    <br>\\n    <mat-divider></mat-divider>\\n    <br>\\n    <div class='hint-msg'>Hint : userone@gmail.com - password</div>\\n  </mat-card-title>\\n  <mat-card-content align='center'>\\n    <form [formGroup]='loginForm' class='login-form-container'>\\n      <mat-form-field  [ngClass]=\\\"{'error': loginForm.controls['email'].errors && loginForm.controls['email'].dirty}\\\">\\n        <input matInput type='text' formControlName='email' placeholder='E-Mail' required>\\n        <div *ngIf=\\\"loginForm.controls['email'].invalid && (loginForm.controls['email'].dirty || loginForm.controls['email'].touched)\\\" class='error-msg'>\\n          <div *ngIf=\\\"loginForm.controls['email'].errors.required\\\">Username is required.</div>\\n          <div *ngIf=\\\"loginForm.controls['email'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n          <div *ngIf=\\\"loginForm.controls['email'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n        </div>\\n      </mat-form-field>\\n      <mat-form-field [ngClass]=\\\"{'error': loginForm.controls['password'].errors && loginForm.controls['password'].dirty}\\\">\\n        <input matInput type='password' formControlName='password' placeholder='Password' required>\\n        <div *ngIf=\\\"loginForm.controls['password'].invalid && (loginForm.controls['password'].dirty || loginForm.controls['password'].touched)\\\" class='error-msg'>\\n          <div *ngIf=\\\"loginForm.controls['password'].errors.required\\\">Password is required.</div>\\n          <div *ngIf=\\\"loginForm.controls['password'].errors.minlength\\\">Password must be at least 5 characters long.</div>\\n          <div *ngIf=\\\"loginForm.controls['password'].errors.maxlength\\\">Password must be at most 10 characters long.</div>\\n        </div>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions align='right'>\\n      <button mat-raised-button color='accent' class='btn' [disabled]='loginForm.invalid' (click)='login()'>Login</button>\\n      <a mat-raised-button routerLink='/register'>Register</a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<!--p>Form Value: {{loginForm.value | json }}</p>\\n<p>Form status: {{loginForm.status | json }}</p>\\n<p>Name value: {{loginForm.get('email').value }}</p>\\n\\n<p>Username errors : {{loginForm.controls['email'].errors && loginForm.controls['email'].dirty}}</p>\\n<p>Username is valid : {{loginForm.controls['email'].valid}}</p>\\n\\n<p>Pwd show errors : {{loginForm.controls['password'].errors && loginForm.controls['password'].dirty}}</p>\\n<p>Pwd valid : {{loginForm.controls['password'].valid}}</p-->\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { patternValidator } from '../../../util/patternValidator';\nimport { AuthService } from '../../../service/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  submitted: boolean = false;\n  invalidLogin: boolean = false;\n\n  loading = false;\n  errorMsg: any; // 2018-12-11\n\n  constructor(\n    private formBuilder: FormBuilder, \n    private router: Router,\n    private authSvc: AuthService\n    ) {\n      this.initLoginForm();\n    }\n\n  initLoginForm() {\n    this.authSvc.logout(); // First reset login status\n\n    this.loginForm = this.formBuilder.group(\n      {\n        email: ['', [Validators.required, patternValidator(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/), , Validators.minLength(2)]],\n        password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]]\n      }\n    );\n  }\n\n  ngOnInit() {}\n\n  public login() {\n    console.log('LoginComponent: login() : email '+this.loginForm.controls['email'].value + ' password '+this.loginForm.controls['password'].value);//+' returnUrl '+this.returnUrl);\n    this.loading = true;\n    this.authSvc.login(this.loginForm.controls['email'].value, this.loginForm.controls['password'].value)\n      .subscribe(\n        data => {\n          this.errorMsg = null;\n          console.log('Login: '+this.loginForm.controls['email'].value+' Logged in!!');\n          this.router.navigate(['list-user']);\n        },\n        error => { \n          this.errorMsg = 'Username and/or password do not match!';\n          console.log('Login: '+this.loginForm.controls['email'].value+' '+this.loginForm.controls['password'].value+' :=> '+this.errorMsg); // 2018-12-11\n          this.router.navigate(['login']);\n          this.loading = false;\n         }\n      );\n  }  \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NlY3VyaXR5L3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card>\\n    <mat-card-title align='center'>Registration Form</mat-card-title>\\n    <mat-card-content align='center'>\\n      <form [formGroup]='registrationForm' class='login-form-container'>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['email'].errors && registrationForm.controls['email'].dirty}\\\">\\n          <input matInput type='text' formControlName='email' placeholder='E-Mail' required>\\n          <div *ngIf=\\\"registrationForm.controls['email'].invalid && (registrationForm.controls['email'].dirty || registrationForm.controls['email'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"registrationForm.controls['email'].errors.required\\\">Username is required.</div>\\n            <div *ngIf=\\\"registrationForm.controls['email'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n            <div *ngIf=\\\"registrationForm.controls['email'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n          </div>\\n        </mat-form-field>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['firstName'].errors && registrationForm.controls['firstName'].dirty}\\\">\\n            <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n            <div *ngIf=\\\"registrationForm.controls['firstName'].invalid && (registrationForm.controls['firstName'].dirty || registrationForm.controls['firstName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"registrationForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n              <div *ngIf=\\\"registrationForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n          <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['lastName'].errors && registrationForm.controls['lastName'].dirty}\\\">\\n            <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n            <div *ngIf=\\\"registrationForm.controls['lastName'].invalid && (registrationForm.controls['lastName'].dirty || registrationForm.controls['lastName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"registrationForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n              <div *ngIf=\\\"registrationForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n  \\n        <mat-form-field>\\n          <input matInput type='password' formControlName='password' placeholder='Password' required>\\n          <div *ngIf=\\\"registrationForm.controls['password'].invalid && (registrationForm.controls['password'].dirty || registrationForm.controls['password'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.required\\\">Password is required.</div>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.minlength\\\">Password must be at least 5 characters long.</div>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.maxlength\\\">Password must be at most 10 characters long.</div>\\n          </div>\\n        </mat-form-field>      \\n      </form>\\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <button mat-raised-button color='accent' class='btn' [disabled]='registrationForm.invalid' (click)='onSubmit()'>Register</button>\\n        <a mat-raised-button routerLink='/login'>Login</a>\\n    </mat-card-actions>\\n  </mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { patternValidator } from '../../../util/patternValidator';\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n\nimport { UserService } from '../../../service/user.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registrationForm: FormGroup;\n  submitted: boolean = false;\n  invalidRegistration: boolean = false;\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  onSubmit() {\n    console.log('RegComp: User Registration starting ...');\n    this.submitted = true;\n    if (this.registrationForm.invalid) return;\n    this.userService.createUser(this.registrationForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['list-user']);\n        }\n    );\n  }  \n\n  ngOnInit() {\n    this.registrationForm = this.formBuilder.group(\n      {\n        id: [],\n        firstName: ['', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)]],\n        lastName: ['', [Validators.required, Validators.minLength(2)]],\n        email: ['', [Validators.required, patternValidator(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]]\n      }\n    );\n  }  \n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvYWRkLXVzZXIvYWRkLXVzZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card>\\n    <mat-card-title align='center'>Add User</mat-card-title>\\n    <mat-card-content align='center'>\\n      <form [formGroup]='addForm' class='login-form-container'>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': addForm.controls['email'].errors && addForm.controls['email'].dirty}\\\">\\n          <input matInput type='text' formControlName='email' placeholder='E-Mail' required>\\n          <div *ngIf=\\\"addForm.controls['email'].invalid && (addForm.controls['email'].dirty || addForm.controls['email'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"addForm.controls['email'].errors.required\\\">Username is required.</div>\\n            <div *ngIf=\\\"addForm.controls['email'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n            <div *ngIf=\\\"addForm.controls['email'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n          </div>\\n        </mat-form-field>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': addForm.controls['firstName'].errors && addForm.controls['firstName'].dirty}\\\">\\n            <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n            <div *ngIf=\\\"addForm.controls['firstName'].invalid && (addForm.controls['firstName'].dirty || addForm.controls['firstName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"addForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n              <div *ngIf=\\\"addForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n          <mat-form-field [ngClass]=\\\"{'error': addForm.controls['lastName'].errors && addForm.controls['lastName'].dirty}\\\">\\n            <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n            <div *ngIf=\\\"addForm.controls['lastName'].invalid && (addForm.controls['lastName'].dirty || addForm.controls['lastName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"addForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n              <div *ngIf=\\\"addForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n  \\n        <mat-form-field>\\n          <input matInput type='password' formControlName='password' placeholder='Password' required>\\n          <div *ngIf=\\\"addForm.controls['password'].invalid && (addForm.controls['password'].dirty || addForm.controls['password'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.required\\\">Password is required.</div>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.minlength\\\">Password must be at least 5 characters long.</div>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.maxlength\\\">Password must be at most 10 characters long.</div>\\n          </div>\\n        </mat-form-field>      \\n      </form>\\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <button mat-raised-button color='accent' class='btn' [disabled]='addForm.invalid' (click)='onSubmit()'>Add User</button>\\n    </mat-card-actions>\\n  </mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\n\nimport { patternValidator } from '../../../util/patternValidator';\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  addForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    this.addForm = this.formBuilder.group(\n      {\n        id: [],\n        firstName: ['', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)]],\n        lastName: ['', [Validators.required, Validators.minLength(2)]],\n        email: ['', [Validators.required, patternValidator(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        password: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]]\n      }\n    );\n  }\n\n  onSubmit() {\n    this.userService.createUser(this.addForm.value)\n      .subscribe(\n        data => {\n          this.router.navigate(['list-user']);\n        }\n    );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvZWRpdC11c2VyL2VkaXQtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-card>\\n  <mat-card-title align='center'>Edit User</mat-card-title>\\n  <mat-card-content align='center'>\\n    <form [formGroup]='editForm' class='login-form-container'>\\n      <mat-form-field [ngClass]=\\\"{'error': editForm.controls['email'].errors && editForm.controls['email'].dirty}\\\">\\n        <input matInput type='text' formControlName='email' placeholder='E-Mail' required>\\n        <div *ngIf=\\\"editForm.controls['email'].invalid && (editForm.controls['email'].dirty || editForm.controls['email'].touched)\\\" class='error-msg'>\\n          <div *ngIf=\\\"editForm.controls['email'].errors.required\\\">Username is required.</div>\\n          <div *ngIf=\\\"editForm.controls['email'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n          <div *ngIf=\\\"editForm.controls['email'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n        </div>\\n      </mat-form-field>\\n      <mat-form-field [ngClass]=\\\"{'error': editForm.controls['firstName'].errors && editForm.controls['firstName'].dirty}\\\">\\n          <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n          <div *ngIf=\\\"editForm.controls['firstName'].invalid && (editForm.controls['firstName'].dirty || editForm.controls['firstName'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"editForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n            <div *ngIf=\\\"editForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n          </div>\\n        </mat-form-field>\\n        <mat-form-field [ngClass]=\\\"{'error': editForm.controls['lastName'].errors && editForm.controls['lastName'].dirty}\\\">\\n          <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n          <div *ngIf=\\\"editForm.controls['lastName'].invalid && (editForm.controls['lastName'].dirty || editForm.controls['lastName'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"editForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n            <div *ngIf=\\\"editForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n          </div>\\n        </mat-form-field>\\n      <mat-form-field>\\n        <mat-checkbox class='example-margin' formControlName='showpassword' (click)='hideShowPassword()'>Show password</mat-checkbox>\\n        <input matInput type={{inputType}} formControlName='password' placeholder='Password' required>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions align='right'>\\n      <button mat-raised-button color='accent' class='btn' [disabled]='editForm.invalid' (click)='onSubmit()'>Update User</button>\\n  </mat-card-actions>\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\n\nimport { User } from '../../../model/user';\nimport {FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn} from \"@angular/forms\";\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\nimport { first } from 'rxjs/operators';\n\nimport { patternValidator } from '../../../util/patternValidator';\n\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} => {\n    const forbidden = nameRe.test(control.value);\n    return forbidden ? {'forbiddenName': {value: control.value}} : null;\n  };\n}\n\n@Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  user: User;\n  editForm: FormGroup;\n  inputType: string = 'password';\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    let userId = localStorage.getItem('editUserId');\n\n    if (!userId) {\n      alert('Invalid action.');\n      this.router.navigate(['list-user']);\n      return;\n    }\n\n    this.editForm = this.formBuilder.group(\n      {\n        id: [],\n        firstName: ['', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)]],\n        lastName: ['', [Validators.required, Validators.minLength(2)]],\n        email: ['', [Validators.required, patternValidator(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/)]],\n        password: ['', [Validators.required, Validators.minLength(5)]],\n        // password: ['password', [Validators.required, Validators.minLength(5), Validators.maxLength(20)]],\n        token: [''],\n        roles: [{}],\n        showpassword: '' // 2018-12-13\n      }\n    );\n\n    this.userService.getUserById(+userId)\n      .subscribe(\n        data => {\n          console.log('Edit:Usr '+JSON.stringify(data));\n          this.editForm.setValue(data);\n        }\n      );\n  }\n\n  onSubmit() {\n    this.userService.updateUser(this.editForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          this.router.navigate(['list-user']);\n        },\n        error => {\n          alert(error);\n        }\n      )\n  }\n\n  hideShowPassword() {\n    if (this.inputType == 'password') {\n      this.inputType = 'text';\n    } else if (this.inputType == 'text') {\n      this.inputType = 'password';\n    }\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvbGlzdC11c2VyL2xpc3QtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-card>\\n    <mat-card-title align='center'>User List</mat-card-title>\\n    <mat-card-content align='center'>\\n\\n        <div *ngIf='dataSource.data.length > 0'>\\n            <div class='example-header'>\\n                <mat-form-field>\\n                <input matInput (keyup)='applyFilter($event.target.value)' placeholder='Filter'>\\n                </mat-form-field>\\n            </div>\\n            <div class='example-container mat-elevation-z8'>\\n                <mat-table [dataSource]='dataSource' matSort>\\n\\n                <ng-container matColumnDef='id'>\\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Id</mat-header-cell>\\n                    <mat-cell *matCellDef='let user'>{{user.id}}</mat-cell>\\n                </ng-container>\\n\\n                <ng-container matColumnDef='firstName'>\\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>First Name</mat-header-cell>\\n                    <mat-cell *matCellDef='let user'>{{user.firstName}}</mat-cell>\\n                </ng-container>\\n                <ng-container matColumnDef='lastName'>\\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</mat-header-cell>\\n                    <mat-cell *matCellDef='let user'>{{user.lastName}}</mat-cell>\\n                </ng-container>\\n                <ng-container matColumnDef='email'>\\n                    <mat-header-cell *matHeaderCellDef mat-sort-header>E-Mail</mat-header-cell>\\n                    <mat-cell *matCellDef='let user'>{{user.email}}</mat-cell>\\n                </ng-container>\\n            \\n                <ng-container matColumnDef=\\\"edit\\\">\\n                    <mat-header-cell *matHeaderCellDef> Edit </mat-header-cell>\\n                    <mat-cell *matCellDef=\\\"let user\\\">\\n                        <button mat-raised-button (click)='editUser(user)'>\\n                            <mat-icon color='primary'>save</mat-icon>\\n                        </button>\\n                    </mat-cell>\\n                </ng-container>\\n            \\n                <ng-container matColumnDef=\\\"delete\\\">\\n                    <mat-header-cell *matHeaderCellDef> Delete </mat-header-cell>\\n                    <mat-cell *matCellDef=\\\"let user\\\">\\n                        <button mat-raised-button (click)='deleteUser(user)'>\\n                            <mat-icon color='accent'>\\n                                <i class=\\\"material-icons\\\">remove_circle_outline</i>\\n                            </mat-icon>\\n                        </button>\\n                    </mat-cell>\\n                </ng-container>\\n            \\n                <mat-header-row *matHeaderRowDef='displayedColumns'></mat-header-row>\\n                <mat-row *matRowDef='let user; columns: displayedColumns;' [ngClass]=\\\"{'highlight': selectedRowIndex == user.id}\\\" (click)='highlightTableRow(user)'></mat-row>\\n                </mat-table>\\n            </div>\\n        </div>\\n        \\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <button mat-raised-button color='accent' class='btn' (click)='addUser()'>Add User</button>\\n        <a mat-raised-button routerLink='/register'>Register</a>\\n    </mat-card-actions>\\n  </mat-card>\\n\"","import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\nimport { User } from '../../../model/user';\n\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\n\n@Component({\n  selector: 'app-list-user',\n  templateUrl: './list-user.component.html',\n  styleUrls: ['./list-user.component.css']\n})\nexport class ListUserComponent implements OnInit {\n\n  users: User[];\n\n  dataSource: MatTableDataSource<User>;\n  displayedColumns = ['id', 'firstName', 'lastName', 'email', 'edit', 'delete'];\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  selectedRowIndex: string = '';\n  selectedUser: User;\n\n  constructor(private router: Router, private userService: UserService) {\n    this.populateUserTable();\n  }\n\n  private populateUserTable() {\n    const users: User[] = [];\n    this.userService.getUsers()\n      .subscribe(users => this.dataSource.data = users);\n    this.dataSource = new MatTableDataSource(users);\n    this.selectedUser = undefined;\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim();\n    filterValue = filterValue.toLocaleLowerCase();\n    this.dataSource.filter = filterValue;\n  }\n\n  ngOnInit() {\n    this.userService.getUsers()\n      .subscribe(\n        data => { this.users = data; }\n      )\n  }\n\n  deleteUser(user: User): void {\n    this.userService.deleteUser(user)\n      .subscribe(\n        data => {\n          this.users = this.users.filter(u => u !== user);\n          this.populateUserTable();\n        }\n      )\n  }\n\n  editUser(user: User): void {\n    localStorage.removeItem(\"editUserId\");\n    if (user.id !== undefined)\n      localStorage.setItem(\"editUserId\", user.id.toString());\n    this.router.navigate(['edit-user']);\n  }\n\n  addUser(): void {\n    this.router.navigate(['add-user']);\n  }\n\n  highlightTableRow(user: User){\n    this.selectedRowIndex = user.id.toString();\n    this.selectedUser = user;\n  }\n\n}","import { Injectable } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { CanActivate } from '@angular/router/src/interfaces';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router/src/router_state';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  // Check if the user is logged in before calling http\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if (localStorage.getItem('currentUser')) {\n      return true;\n    }\n    this.router.navigate(['/login'],\n      {\n        queryParams: { returnUrl: state.url }\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { User } from '../model/user';\n\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private loginUrl = 'api/user/login';\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getHeaders(): { headers: HttpHeaders } {\n    var httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n      })\n    };\n    return httpOptions;\n  }  \n\n  login(username: string, password: string) {\n    console.log('AuthSvc: login uname '+username+' pwd '+password);\n    return this.http.post(this.loginUrl, JSON.stringify({ username: username, password: password }), this.getHeaders())\n      .pipe(\n        tap(\n          (user: User) => {\n            this.log(`Logged in user username=${user.email}`);\n            localStorage.setItem('currentUser', JSON.stringify(user));\n          }\n        )\n      );\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    console.log('AuthSvc: logout currentUser '+localStorage.getItem('currentUser'));\n  }\n\n  private log(message: string) {\n    console.log('usrSvc : '+message+'');\n  }\n\n  public getToken(): string {\n    var currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    var token = currentUser && currentUser.token;\n    return token ? token : '';\n  }\n\n}","import { Injectable, Injector } from '@angular/core';\n\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { User } from '../model/user';\n\nimport { tap, catchError } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\n\nimport {Observable, throwError} from 'rxjs';\n\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private usrUrl = 'api/user';\n\n  constructor(\n    private http: HttpClient,\n    private authSvc: AuthService,\n    private router: Router\n    // private injector: Injector\n  ) {}\n\n  getHeaders(): { headers: HttpHeaders } {\n    var httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n        'Authorization': 'Bearer ' + this.authSvc.getToken()\n      })\n    };\n    return httpOptions;\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.usrUrl, this.getHeaders())\n      .pipe(\n        tap(\n          users => this.log(`fetched ${users.length} users`)),\n          // catchError(this.handleError)\n      );\n  }\n\n  // private handleError(error: HttpErrorResponse) {\n  //   //const router = Router;\n  //   if (error.error instanceof ErrorEvent) {\n  //     // A client-side or network error occurred. Handle it accordingly.\n  //     console.error('An error occurred:', error.error.message);\n  //   } else {\n  //     // The backend returned an unsuccessful response code.\n  //     // The response body may contain clues as to what went wrong,\n  //     console.error(\n  //       `Backend returned code ${error.status}, ` +\n  //       `body was: ${error.error}`);\n  //       // this.router.navigate(['login']);\n  //       this.router.navigateByUrl('/login');\n  //   }\n  //   // return an observable with a user-facing error message\n  //   return throwError('Something bad happened; please try again later.');\n  // };\n  // public get router(): Router { //this creates router property on your service.\n  //     return this.injector.get(Router);\n  // }\n\n  deleteUser(user: User | string): Observable<User> {\n    const id = typeof user === 'string' ? user : user.id;\n    const url = `${this.usrUrl}/${id}`;\n\n    return this.http.delete<User>(url, this.getHeaders())\n      .pipe(\n        tap(_ => this.log(`deleted user id=${id}`))\n      );\n  }\n\n  getUserById(id: number): Observable<User> {\n    const url = `${this.usrUrl}/${id}`;\n    return this.http.get<User>(url, this.getHeaders())\n      .pipe(\n        tap(_ => this.log(`fetched user id=${id}`))\n      );\n  }\n\n  updateUser(user: User): Observable<any> {\n    return this.http.put(this.usrUrl, user, this.getHeaders())\n      .pipe(\n        tap(_ => this.log(`updated user username=${user.email}`))\n      );\n  } \n  \n  addUser(user: User): Observable<User> {\n    return this.http.post<User>(this.usrUrl, user, this.getHeaders())\n      .pipe(\n        tap((user: User) => this.log(`added user username=${user.email}`))\n      );\n  }\n\n  createUser(user: User) {\n    return this.http.post(this.usrUrl, user);\n  }\n\n  private log(message: string) {\n    console.log('usrSvc : '+message+'');\n  }\n  \n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n    HttpEvent,\n    HttpInterceptor,\n    HttpHandler,\n    HttpRequest,\n    HttpErrorResponse,\n    HttpResponse\n} from '@angular/common/http';\nimport { Router } from '@angular/router';\n// import { tap, catchError } from 'rxjs/operators';\n\nimport { Observable, throwError } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n\n    constructor(private injector: Injector) {}\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // return next.handle(req);\n        return next.handle(req)\n            .pipe(\n                tap(\n                    (event: HttpEvent<any>) => {\n                        if(event instanceof HttpResponse){\n                            // if the token is valid\n                        }\n                    },\n                    (error: any) => {\n                        // if the token has expired.\n                        if(error instanceof HttpErrorResponse) {\n                            if(error.status === 401){\n                                // this is where you can do anything like navigating  \n                            }\n                            if (error.status === 500) {\n                                this.router.navigateByUrl('/login');\n                            }\n                            console.error(\n                                `ErrIntercept: Backend returned code ${error.status}, ` +\n                                `body was: ${error.error}`\n                            );                            \n                        }\n                    }\n                )\n            );\n    }\n\n    // handleError(error: HttpErrorResponse) {\n    //     if (error.error instanceof ErrorEvent) {\n    //       // A client-side or network error occurred. Handle it accordingly.\n    //       console.error('An error occurred:', error.error.message);\n    //     } else {\n    //       // The backend returned an unsuccessful response code.\n    //       // The response body may contain clues as to what went wrong,\n    //       console.error(\n    //         `Backend returned code 3333 ${error.status}, ` +\n    //         `body was: ${error.error}`);\n    //         // this.router.navigate(['login']);\n    //         this.router.navigateByUrl('/login');\n    //     }\n    //     // return an observable with a user-facing error message\n    //     return throwError(\n    //       '222:Something bad happened; please try again later.');\n    //   };\n\n    public get router(): Router { //this creates router property on your service.\n        return this.injector.get(Router);\n    }\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { ErrorInterceptor } from './error-interceptor';\n\n/** Http Interceptor providers in outside-in order */\n\nexport const httpInterceptorProviders = [\n    {\n        provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true\n    }\n];\n\nexport class Index {}\n","import { AbstractControl, ValidatorFn, FormGroup } from '@angular/forms';\r\n\r\nexport function patternValidator(regexp: RegExp): ValidatorFn {\r\n  return (control: AbstractControl): { [key: string]: any } => {\r\n    const value = control.value;\r\n    if (value === '') {\r\n      return null;\r\n    }\r\n    return !regexp.test(value) ? { 'patternInvalid': { regexp } } : null;\r\n  };\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error('Main: >>> : '+err));\n"],"sourceRoot":""}