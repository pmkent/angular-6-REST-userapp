{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/angular-material.module.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/pages/footer/footer.component.css","webpack:///./src/app/pages/footer/footer.component.html","webpack:///./src/app/pages/footer/footer.component.ts","webpack:///./src/app/pages/header/header.component.css","webpack:///./src/app/pages/header/header.component.html","webpack:///./src/app/pages/header/header.component.ts","webpack:///./src/app/pages/security/login/login.component.css","webpack:///./src/app/pages/security/login/login.component.html","webpack:///./src/app/pages/security/login/login.component.ts","webpack:///./src/app/pages/security/registration/registration.component.css","webpack:///./src/app/pages/security/registration/registration.component.html","webpack:///./src/app/pages/security/registration/registration.component.ts","webpack:///./src/app/pages/user/add-user/add-user.component.css","webpack:///./src/app/pages/user/add-user/add-user.component.html","webpack:///./src/app/pages/user/add-user/add-user.component.ts","webpack:///./src/app/pages/user/edit-user/edit-user.component.css","webpack:///./src/app/pages/user/edit-user/edit-user.component.html","webpack:///./src/app/pages/user/edit-user/edit-user.component.ts","webpack:///./src/app/pages/user/list-user/list-user.component.css","webpack:///./src/app/pages/user/list-user/list-user.component.html","webpack:///./src/app/pages/user/list-user/list-user.component.ts","webpack:///./src/app/service/auth-guard.service.ts","webpack:///./src/app/service/auth.service.ts","webpack:///./src/app/service/user.service.ts","webpack:///./src/app/util/forbiddenNameValidator.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport * as Material from '@angular/material';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    Material.MatToolbarModule,\n    Material.MatButtonModule,\n    Material.MatCardModule,\n    Material.MatDialogModule,\n    Material.MatInputModule,\n    Material.MatTableModule,\n    Material.MatIconModule,\n    Material.MatMenuModule,\n    Material.MatDividerModule,\n    Material.MatCheckboxModule,\n    Material.MatDividerModule,\n    Material.MatPaginatorModule\n  ],\n  exports: [\n    Material.MatToolbarModule,\n    Material.MatButtonModule,\n    Material.MatCardModule,\n    Material.MatDialogModule,\n    Material.MatInputModule,\n    Material.MatTableModule,\n    Material.MatIconModule,\n    Material.MatMenuModule,\n    Material.MatDividerModule,\n    Material.MatCheckboxModule,\n    Material.MatDividerModule,\n    Material.MatPaginatorModule\n  ]\n})\nexport class AngularMaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './pages/security/login/login.component';\nimport { AddUserComponent } from './pages/user/add-user/add-user.component';\nimport { ListUserComponent } from './pages/user/list-user/list-user.component';\nimport { EditUserComponent } from './pages/user/edit-user/edit-user.component';\nimport { RegistrationComponent } from './pages/security/registration/registration.component';\n\nimport { AuthGuardService } from './service/auth-guard.service';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegistrationComponent },\n  { path: 'add-user', component: AddUserComponent, canActivate: [AuthGuardService] },\n  { path: 'list-user', component: ListUserComponent, canActivate: [AuthGuardService] },\n  { path: 'edit-user', component: EditUserComponent, canActivate: [AuthGuardService] },\n  { path: '', component: LoginComponent, canActivate: [AuthGuardService] },\n  { path: '**', redirectTo: '' }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ],\n  providers: [ AuthGuardService ]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<section [class.alternate-theme]='isAlternateTheme'>\\n    <app-header></app-header>\\n    <router-outlet></router-outlet>\\n    <app-footer></app-footer>\\n</section>\\n\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'userapp';\n  isAlternateTheme = false;\n\n  toggleTheme() {\n    this.isAlternateTheme = !this.isAlternateTheme;\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './pages/security/login/login.component';\nimport { AddUserComponent } from './pages/user/add-user/add-user.component';\nimport { EditUserComponent } from './pages/user/edit-user/edit-user.component';\nimport { ListUserComponent } from './pages/user/list-user/list-user.component';\n\nimport { UserService } from './service/user.service';\n\nimport { ReactiveFormsModule } from '@angular/forms'; // bug fix\nimport { AngularMaterialModule } from './angular-material.module';\nimport { HeaderComponent } from './pages/header/header.component';\nimport { FooterComponent } from './pages/footer/footer.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { RegistrationComponent } from './pages/security/registration/registration.component';\n\nimport { AuthService } from './service/auth.service';\n// import { httpInterceptorProviders } from './util/index';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    AddUserComponent,\n    EditUserComponent,\n    ListUserComponent,\n    HeaderComponent,\n    FooterComponent,\n    RegistrationComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    AngularMaterialModule,\n    BrowserAnimationsModule, // bug fix\n    HttpClientModule\n  ],\n  providers: [\n    UserService,\n    AuthService,\n    // httpInterceptorProviders\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2Zvb3Rlci9mb290ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar class='primary' style='height: 50px;'>\\n  <span class='spacer'></span>\\n  <div class='hint-msg'>\\n    © Copyright Angular-User-CRUD. {{buildDate | date:'yyyy'}}\\n  </div>  \\n  <span class='spacer'></span>\\n</mat-toolbar>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.css']\n})\nexport class FooterComponent implements OnInit {\n\n  buildDate;\n\n  constructor() {\n    this.buildDate = new Date();\n  }\n\n  ngOnInit() {}\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-toolbar style='height:20px;'>\\n  <span class='spacer'></span>\\n  <div *ngIf='authSvc.loggedInUser' class='hint-msg'>Your are logged in as:  {{authSvc.loggedInUser.lastName}}, {{authSvc.loggedInUser.firstName}}</div>\\n  <div *ngIf='!authSvc.loggedInUser' class='hint-msg'>You are NOT logged in!</div>\\n  <span class='spacer'></span>\\n  <div class='hint-msg' *ngIf='authSvc.loggedInUser'><a routerLink='/login'>Logout</a></div>\\n  <div class='hint-msg' *ngIf='!authSvc.loggedInUser'><a routerLink='/login'>Login</a></div>\\n</mat-toolbar>\\n\\n<mat-toolbar color='primary' style='height:40px;'>\\n  <button mat-icon-button routerLink='/list-user'>\\n    <mat-icon>home</mat-icon>\\n  </button>  \\n  <span class='spacer'></span>\\n  <span>Angular User CRUD</span>\\n  <span class='spacer'></span>\\n  <button mat-icon-button [matMenuTriggerFor]='menu'>\\n    <mat-icon><i class='material-icons'>view_headline</i></mat-icon>\\n  </button>\\n\\n  <mat-menu #menu='matMenu'>\\n    <button mat-menu-item routerLink='/login'>\\n      <mat-icon>home</mat-icon>\\n      <span>Login</span>\\n    </button>\\n    <button mat-menu-item routerLink='/list-user'>\\n      <mat-icon>list</mat-icon>\\n      <span>List Users</span>\\n    </button>\\n    <button mat-menu-item routerLink='/add-user'>\\n      <mat-icon>playlist_add</mat-icon>\\n      <span>Add User</span>\\n    </button>\\n    <button mat-menu-item routerLink='/register'>\\n      <mat-icon>spellcheck</mat-icon>\\n      <span>Register</span>\\n    </button>\\n    <button mat-menu-item routerLink='/login'>\\n      <mat-icon>settings_power</mat-icon>\\n      <span>Logout</span>\\n    </button>\\n    <button mat-menu-item (click)='toggleTheme()'>Toggle Theme</button>\\n  </mat-menu>\\n</mat-toolbar>\\n\"","import { Component } from '@angular/core';\nimport { AppComponent } from '../../app.component';\nimport { AuthService } from 'src/app/service/auth.service';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent {\n\n  constructor(\n    private appComponent: AppComponent,\n    public authSvc: AuthService\n  ) {}\n\n  toggleTheme() {\n    this.appComponent.toggleTheme();\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NlY3VyaXR5L2xvZ2luL2xvZ2luLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<mat-card *ngIf='errorMsg'>\\n  <mat-card-content align='center'>\\n    <div *ngIf='errorMsg' [ngClass]=\\\"{'error': errorMsg}\\\">\\n      {{errorMsg}}\\n    </div>\\n  </mat-card-content>\\n</mat-card>  \\n\\n<mat-card>\\n  <mat-card-title align='center'>\\n    Login\\n    <mat-divider></mat-divider>\\n    <div class='hint-msg'>Hint : userone@gmail.com - password</div>\\n  </mat-card-title>\\n  <mat-card-content align='center'>\\n    <form [formGroup]='loginForm' class='login-form-container'>\\n      <mat-form-field>\\n        <input matInput type='text' formControlName='email' placeholder='E-Mail' required>\\n        <mat-error *ngIf=\\\"loginForm.controls['email'].errors?.required\\\">Email is required</mat-error>\\n        <mat-error *ngIf=\\\"loginForm.controls['email'].errors?.minlength\\\">Email must be at least 2 characters long</mat-error>\\n        <mat-error *ngIf=\\\"loginForm.controls['email'].errors?.email\\\">Email must be a valid E-Mail address</mat-error>\\n      </mat-form-field>\\n      <mat-form-field>\\n        <input matInput type='password' formControlName='password' placeholder='Password' required>\\n        <mat-error *ngIf=\\\"loginForm.controls['password'].errors?.required\\\">Password is required</mat-error>\\n        <mat-error *ngIf=\\\"loginForm.controls['password'].errors?.minlength\\\">Password must be at least 5 characters long</mat-error>\\n        <mat-error *ngIf=\\\"loginForm.controls['password'].errors?.maxlength\\\">Password must be at most 20 characters long</mat-error>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions align='right'>\\n      <button mat-raised-button color='primary' class='btn' [disabled]='loginForm.invalid' (click)='login()'>Login</button>\\n      <a mat-raised-button routerLink='/register' color='warn'>Register</a>\\n  </mat-card-actions>\\n</mat-card>\\n\\n<!--p>Form Value: {{loginForm.value | json }}</p>\\n<p>Form status: {{loginForm.status | json }}</p>\\n<p>Name value: {{loginForm.get('email').value }}</p>\\n\\n<p>Username errors : {{loginForm.controls['email'].errors && loginForm.controls['email'].dirty}}</p>\\n<p>Username is valid : {{loginForm.controls['email'].valid}}</p>\\n\\n<p>Pwd show errors : {{loginForm.controls['password'].errors && loginForm.controls['password'].dirty}}</p>\\n<p>Pwd valid : {{loginForm.controls['password'].valid}}</p-->\\n\\n\\n  <!-- https://www.youtube.com/watch?v=ZGWOc37kQkw -->\"","import { Component } from '@angular/core';\n\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../service/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  loginForm: FormGroup;\n  submitted: false;\n  invalidLogin: false;\n\n  loading = false;\n  errorMsg: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authSvc: AuthService,\n    ) {\n      this.initLoginForm();\n    }\n\n  initLoginForm() {\n    this.authSvc.logout(); // First reset login status\n\n    this.loginForm = this.formBuilder.group(\n      {\n        email: [ '', [ Validators.required, Validators.email ] ],\n        password: [ '', [ Validators.required, Validators.minLength(5), Validators.maxLength(20) ] ]\n      }\n    );\n  }\n\n  public login() {\n    console.log('LoginComponent: login() : email ' + this.loginForm.controls['email'].value +\n      ' password ' + this.loginForm.controls['password'].value);\n    this.loading = true;\n    this.authSvc.login(this.loginForm.controls['email'].value, this.loginForm.controls['password'].value)\n      .subscribe(\n        user => {\n          console.log('Login: You are trying to log in as ' + this.loginForm.controls['email'].value + ', ' +\n            this.loginForm.controls['password'].value + ' null data? ' + (user == null));\n          if (user == null) {\n            this.errorMsg = 'Login failed: Username and/or password do not match!';\n            this.router.navigate(['login']);\n          } else {\n            this.errorMsg = null;\n            this.authSvc.loggedInUser = user;\n            this.router.navigate(['list-user']);\n          }\n        },\n        // error => { // Never reach here because of service error catching!!!\n        //   this.errorMsg = 'Username and/or password do not match!';\n        //   console.log(`Login: FAILED because ${error} : ` + this.loginForm.controls['email'].value + ' ' +\n        //   this.loginForm.controls['password'].value + ' :=> ' + this.errorMsg); // 2018-12-11\n\n        //   console.log('Login failure usr? '); // TODO test\n        //   this.authSvc.loggedInUser = null;\n\n        //   this.router.navigate(['login']);\n        //   this.loading = false;\n        //  }\n      );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3NlY3VyaXR5L3JlZ2lzdHJhdGlvbi9yZWdpc3RyYXRpb24uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card *ngIf='errorMsg'>\\n  <mat-card-content align='center'>\\n    <div *ngIf='errorMsg' [ngClass]=\\\"{'error': errorMsg}\\\">\\n      {{errorMsg}}\\n    </div>\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card>\\n    <mat-card-title align='center'>\\n      Registration Form\\n      <mat-divider></mat-divider>\\n    </mat-card-title>\\n    <mat-card-content align='center'>\\n      <form [formGroup]='registrationForm' class='login-form-container'>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['username'].errors && registrationForm.controls['username'].dirty}\\\">\\n          <input matInput type='text' formControlName='username' placeholder='E-Mail' required>\\n          <div *ngIf=\\\"registrationForm.controls['username'].invalid && (registrationForm.controls['username'].dirty || registrationForm.controls['username'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"registrationForm.controls['username'].errors.required\\\">Username is required.</div>\\n            <div *ngIf=\\\"registrationForm.controls['username'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n            <div *ngIf=\\\"registrationForm.controls['username'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n          </div>\\n        </mat-form-field>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['firstName'].errors && registrationForm.controls['firstName'].dirty}\\\">\\n            <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n            <div *ngIf=\\\"registrationForm.controls['firstName'].invalid && (registrationForm.controls['firstName'].dirty || registrationForm.controls['firstName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"registrationForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n              <div *ngIf=\\\"registrationForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n          <mat-form-field [ngClass]=\\\"{'error': registrationForm.controls['lastName'].errors && registrationForm.controls['lastName'].dirty}\\\">\\n            <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n            <div *ngIf=\\\"registrationForm.controls['lastName'].invalid && (registrationForm.controls['lastName'].dirty || registrationForm.controls['lastName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"registrationForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n              <div *ngIf=\\\"registrationForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n  \\n        <mat-form-field>\\n          <input matInput type='password' formControlName='password' placeholder='Password' required>\\n          <div *ngIf=\\\"registrationForm.controls['password'].invalid && (registrationForm.controls['password'].dirty || registrationForm.controls['password'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.required\\\">Password is required.</div>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.minlength\\\">Password must be at least 5 characters long.</div>\\n            <div *ngIf=\\\"registrationForm.controls['password'].errors.maxlength\\\">Password must be at most 10 characters long.</div>\\n          </div>\\n        </mat-form-field>      \\n      </form>\\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <button mat-raised-button color='accent' class='btn' [disabled]='registrationForm.invalid' (click)='onSubmit()'>Register</button>\\n        <a mat-raised-button routerLink='/login'>Login</a>\\n    </mat-card-actions>\\n  </mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { forbiddenNameValidator } from '../../../util/forbiddenNameValidator';\nimport { UserService } from '../../../service/user.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.css']\n})\nexport class RegistrationComponent implements OnInit {\n\n  registrationForm: FormGroup;\n  submitted: boolean;\n  invalidRegistration: boolean;\n\n  errorMsg: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private usrSvc: UserService\n  ) {}\n\n  onSubmit() {\n    console.log('RegComp: User Registration starting ...');\n    this.submitted = true;\n    if (this.registrationForm.invalid) {\n      return;\n    }\n    this.usrSvc.addUser(this.registrationForm.value)\n      .subscribe(\n        user => {\n          console.log(`RegisterUsr:onSubmit user?? ${user}`);\n          if (user === undefined) {\n            this.errorMsg = 'Username ' + this.registrationForm.controls['username'].value + ' exists. Please choose another username!';\n            this.router.navigate(['register']);\n          } else {\n            this.errorMsg = null;\n            this.router.navigate(['list-user']);\n          }\n        },\n        error => { // Never gets here becuse of UsrSvc error handling!\n          this.router.navigate(['register']);\n          this.errorMsg = 'Username exists. Please choose another username!';\n          console.log(`RegisterUsr:onSubmit: FAILED because ${error} : ` + this.registrationForm.controls['username'].value); // 2018-12-11\n        }\n    );\n  }\n\n  ngOnInit() {\n    this.registrationForm = this.formBuilder.group(\n      {\n        id: [ '' ],\n\n        userId: [ 0 ],\n        username: [ '', [Validators.required, Validators.email] ], // 2018-12-22\n        firstName: [ '', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)] ],\n        lastName: [ '', [Validators.required, Validators.minLength(2)] ],\n        password: ['', [Validators.required, Validators.minLength(5)] ],\n        token: [ '' ],\n        addresses: [ null ],\n        roles: [ null ],\n        country: [ '' ],\n        website: [ '' ],\n        phones: [ null ],\n        emails: [ null ],\n        showpassword: '', // bug fix, must add to backend User POJO\n\n        createDt: [ null ],\n        updateDt: [ null ],\n        updateBy: [ '' ],\n        deleteDt: [ null ]\n      }\n    );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvYWRkLXVzZXIvYWRkLXVzZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<mat-card *ngIf='errorMsg'>\\n  <mat-card-content align='center'>\\n    <div *ngIf='errorMsg' [ngClass]=\\\"{'error': errorMsg}\\\">\\n      {{errorMsg}}\\n    </div>\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card>\\n    <mat-card-title align='center'>\\n      Add User\\n      <mat-divider></mat-divider>\\n    </mat-card-title>\\n    <mat-card-content align='center'>\\n      <form [formGroup]='addForm' class='login-form-container'>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': addForm.controls['username'].errors && addForm.controls['username'].dirty}\\\">\\n          <input matInput type='text' formControlName='username' placeholder='E-Mail' required>\\n          <div *ngIf=\\\"addForm.controls['username'].invalid && (addForm.controls['username'].dirty || addForm.controls['username'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"addForm.controls['username'].errors.required\\\">Username is required.</div>\\n            <div *ngIf=\\\"addForm.controls['username'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n            <div *ngIf=\\\"addForm.controls['username'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n          </div>\\n        </mat-form-field>\\n  \\n        <mat-form-field [ngClass]=\\\"{'error': addForm.controls['firstName'].errors && addForm.controls['firstName'].dirty}\\\">\\n            <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n            <div *ngIf=\\\"addForm.controls['firstName'].invalid && (addForm.controls['firstName'].dirty || addForm.controls['firstName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"addForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n              <div *ngIf=\\\"addForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n          <mat-form-field [ngClass]=\\\"{'error': addForm.controls['lastName'].errors && addForm.controls['lastName'].dirty}\\\">\\n            <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n            <div *ngIf=\\\"addForm.controls['lastName'].invalid && (addForm.controls['lastName'].dirty || addForm.controls['lastName'].touched)\\\" class='error-msg'>\\n              <div *ngIf=\\\"addForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n              <div *ngIf=\\\"addForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n            </div>\\n          </mat-form-field>\\n  \\n        <mat-form-field>\\n          <input matInput type='password' formControlName='password' placeholder='Password' required>\\n          <div *ngIf=\\\"addForm.controls['password'].invalid && (addForm.controls['password'].dirty || addForm.controls['password'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.required\\\">Password is required.</div>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.minlength\\\">Password must be at least 5 characters long.</div>\\n            <div *ngIf=\\\"addForm.controls['password'].errors.maxlength\\\">Password must be at most 10 characters long.</div>\\n          </div>\\n        </mat-form-field>      \\n      </form>\\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <a mat-raised-button routerLink='/list-user'>Cancel</a>\\n        <button mat-raised-button color='accent' class='btn' [disabled]='addForm.invalid' (click)='onSubmit()'>Add User</button>\\n    </mat-card-actions>\\n  </mat-card>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\nimport { forbiddenNameValidator } from '../../../util/forbiddenNameValidator';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  addForm: FormGroup;\n  errorMsg: any;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private usrSvc: UserService\n  ) {}\n\n  ngOnInit() {\n    this.addForm = this.formBuilder.group(\n      {\n        id: [ '' ], // TODO test\n\n        userId: [ 0 ],\n        username: [ '', [Validators.required, Validators.email] ], // 2018-12-22\n        firstName: [ '', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)] ],\n        lastName: [ '', [Validators.required, Validators.minLength(2)] ],\n        password: ['', [Validators.required, Validators.minLength(5)] ],\n        token: [ '' ],\n        addresses: [ null ],\n        roles: [ null ],\n        country: [ '' ],\n        website: [ '' ],\n        phones: [ null ],\n        emails: [ null ],\n        showpassword: '', // bug fix, must add to backend User POJO\n\n        createDt: [ null ],\n        updateDt: [ null ],\n        updateBy: [ '' ],\n        deleteDt: [ null ]\n      }\n    );\n  }\n\n  onSubmit() {\n    this.usrSvc.addUser(this.addForm.value)\n      .subscribe(\n        user => {\n          console.log(`AddUsr:onSubmit user?? ${user}`);\n          if (user === undefined) {\n            this.errorMsg = 'Username ' + this.addForm.controls['username'].value + ' exists. Please choose another username!';\n            this.router.navigate(['add-user']);\n          } else {\n            this.errorMsg = null;\n            this.router.navigate(['list-user']);\n          }\n        }\n    );\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvZWRpdC11c2VyL2VkaXQtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-card>\\n  <mat-card-title align='center'>Edit User</mat-card-title>\\n  <mat-card-content align='center'>\\n    <form [formGroup]='editForm' class='login-form-container'>\\n      <input type='hidden' formControlName='id'> <!-- 2018-12-22 -->\\n      <input type='hidden' formControlName='userId'> <!-- 2018-12-22 -->\\n      <mat-form-field [ngClass]=\\\"{'error': editForm.controls['username'].errors && editForm.controls['username'].dirty}\\\">\\n        <input matInput type='text' formControlName='username' placeholder='E-Mail' required>\\n        <div *ngIf=\\\"editForm.controls['username'].invalid && (editForm.controls['username'].dirty || editForm.controls['username'].touched)\\\" class='error-msg'>\\n          <div *ngIf=\\\"editForm.controls['username'].errors.required\\\">Username is required.</div>\\n          <div *ngIf=\\\"editForm.controls['username'].errors.minlength\\\">Username must be at least 2 characters long.</div>\\n          <div *ngIf=\\\"editForm.controls['username'].errors.patternInvalid\\\">Username must be a valid E-Mail address.</div>\\n        </div>\\n      </mat-form-field>\\n      <mat-form-field [ngClass]=\\\"{'error': editForm.controls['firstName'].errors && editForm.controls['firstName'].dirty}\\\">\\n          <input matInput type='text' formControlName='firstName' placeholder='First Name' required>\\n          <div *ngIf=\\\"editForm.controls['firstName'].invalid && (editForm.controls['firstName'].dirty || editForm.controls['firstName'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"editForm.controls['firstName'].errors.required\\\">First Name is required.</div>\\n            <div *ngIf=\\\"editForm.controls['firstName'].errors.minlength\\\">First Name must be at least 2 characters long.</div>\\n          </div>\\n        </mat-form-field>\\n        <mat-form-field [ngClass]=\\\"{'error': editForm.controls['lastName'].errors && editForm.controls['lastName'].dirty}\\\">\\n          <input matInput type='text' formControlName='lastName' placeholder='Last Name' required>\\n          <div *ngIf=\\\"editForm.controls['lastName'].invalid && (editForm.controls['lastName'].dirty || editForm.controls['lastName'].touched)\\\" class='error-msg'>\\n            <div *ngIf=\\\"editForm.controls['lastName'].errors.required\\\">Last Name is required.</div>\\n            <div *ngIf=\\\"editForm.controls['lastName'].errors.minlength\\\">Last Name must be at least 2 characters long.</div>\\n          </div>\\n        </mat-form-field>\\n      <mat-form-field>\\n        <mat-checkbox class='example-margin' formControlName='showpassword' (click)='hideShowPassword()'>Show password</mat-checkbox>\\n        <input matInput type={{inputType}} formControlName='password' placeholder='Password' required>\\n      </mat-form-field>\\n    </form>\\n  </mat-card-content>\\n  <mat-card-actions align='right'>\\n      <a mat-raised-button routerLink='/list-user'>Cancel</a>\\n      <button mat-raised-button color='accent' class='btn' [disabled]='editForm.invalid' (click)='onSubmit()'>Update User</button>\\n  </mat-card-actions>\\n</mat-card>\"","import { Component, OnInit } from '@angular/core';\n\nimport { User } from '../../../model/user';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\nimport { first } from 'rxjs/operators';\nimport { forbiddenNameValidator } from '../../../util/forbiddenNameValidator';\n\n@Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  user: User;\n  editForm: FormGroup;\n  inputType: string;\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    this.inputType = 'password';\n    const id = localStorage.getItem('editUserId');\n\n    if (!id) {\n      alert('Invalid action.');\n      this.router.navigate(['list-user']);\n      return;\n    }\n\n    this.editForm = this.formBuilder.group(\n      {\n        id: [ '' ],\n\n        userId: [ 0 ],\n        username: [ '', [Validators.required, Validators.email] ], // 2018-12-22\n        firstName: [ '', [Validators.required, Validators.minLength(2), forbiddenNameValidator(/bob/i)] ],\n        lastName: [ '', [Validators.required, Validators.minLength(2)] ],\n        password: ['', [Validators.required, Validators.minLength(5)] ],\n        token: [ '' ],\n        addresses: [ null ],\n        roles: [ null ],\n        country: [ '' ],\n        website: [ '' ],\n        phones: [ null ],\n        emails: [ null ],\n        showpassword: 'text', // bug fix, must add to backend User POJO\n\n        createDt: [ null ],\n        updateDt: [ null ],\n        updateBy: [ '' ],\n        deleteDt: [ null ]\n      }\n    );\n\n    console.log('%%% User Id is >' + id + '<');\n\n    this.userService.getUser(id)\n      .subscribe(\n        data => {\n          console.log('Edit:Usr ngOnInit ' + JSON.stringify(data));\n          this.editForm.setValue(data);\n        }\n      );\n  }\n\n  onSubmit() {\n    this.userService.updateUser(this.editForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          console.log('Edit:Usr onSubmit ' + JSON.stringify(data));\n          this.router.navigate(['list-user']);\n        },\n        error => {\n          alert(error);\n        }\n      );\n  }\n\n  hideShowPassword() {\n    if (this.inputType === 'password') {\n      this.inputType = 'text';\n    } else if (this.inputType === 'text') {\n      this.inputType = 'password';\n    }\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3VzZXIvbGlzdC11c2VyL2xpc3QtdXNlci5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<mat-card>\\n    <mat-card-title align='center'>\\n        User List\\n        <br>\\n        <mat-divider></mat-divider>\\n    </mat-card-title>\\n    <mat-card-content align='center'>\\n        <!-- starting mat table -->\\n        <div *ngIf='dataSource.data.length > 0'>\\n            <div class='example-header'>\\n                <mat-form-field>\\n                    <input matInput (keyup)='applyFilter($event.target.value)' placeholder='Filter'>\\n                </mat-form-field>\\n            </div>\\n            <div class='example-container mat-elevation-z8'>\\n                <mat-table [dataSource]='dataSource' matSort>\\n                    <ng-container matColumnDef='userId'>\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Id</mat-header-cell>\\n                        <mat-cell *matCellDef='let user'>{{user.userId}}</mat-cell>\\n                    </ng-container>\\n                    <ng-container matColumnDef='firstName'>\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>First Name</mat-header-cell>\\n                        <mat-cell *matCellDef='let user'>{{user.firstName}}</mat-cell>\\n                    </ng-container>\\n                    <ng-container matColumnDef='lastName'>\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>Last Name</mat-header-cell>\\n                        <mat-cell *matCellDef='let user'>{{user.lastName}}</mat-cell>\\n                    </ng-container>\\n                    <ng-container matColumnDef='username'>\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header>User Name</mat-header-cell>\\n                        <mat-cell *matCellDef='let user'>{{user.username}}</mat-cell>\\n                    </ng-container>    \\n                    <ng-container matColumnDef=\\\"password\\\">\\n                        <mat-header-cell *matHeaderCellDef mat-sort-header> Password </mat-header-cell>\\n                        <mat-cell *matCellDef=\\\"let user\\\"> {{user.password}} </mat-cell>\\n                    </ng-container>        \\n        \\n                    <ng-container matColumnDef=\\\"edit\\\">\\n                        <mat-header-cell *matHeaderCellDef> Edit </mat-header-cell>\\n                        <mat-cell *matCellDef=\\\"let user\\\">\\n                            <button mat-raised-button (click)='editUser(user)'>\\n                                <mat-icon color='primary'>edit</mat-icon>\\n                            </button>\\n                        </mat-cell>\\n                    </ng-container>\\n            \\n                    <ng-container matColumnDef=\\\"delete\\\">\\n                        <mat-header-cell *matHeaderCellDef> Delete </mat-header-cell>\\n                        <mat-cell *matCellDef=\\\"let user\\\">\\n                            <button mat-raised-button (click)='deleteUser(user)'>\\n                                <mat-icon color='accent'>\\n                                    <i class=\\\"material-icons\\\">remove_circle_outline</i>\\n                                </mat-icon>\\n                            </button>\\n                        </mat-cell>\\n                    </ng-container>\\n        \\n                    <mat-header-row *matHeaderRowDef='displayedColumns'></mat-header-row>\\n                    <mat-row *matRowDef='let user; columns: displayedColumns;'></mat-row>\\n                </mat-table>\\n        \\n                <mat-paginator [pageSizeOptions]='[5, 10, 15]'></mat-paginator>\\n            </div>\\n        </div>        \\n        <!-- ending mat table-->\\n    </mat-card-content>\\n    <mat-card-actions align='right'>\\n        <button mat-raised-button color='accent' class='btn' (click)='addUser()'>Add User</button>\\n        <a mat-raised-button routerLink='/register'>Register</a>\\n    </mat-card-actions>\\n</mat-card>\"","import { Component, ViewChild } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { UserService } from '../../../service/user.service';\nimport { User } from '../../../model/user';\n\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\n\n@Component({\n  selector: 'app-list-user',\n  templateUrl: './list-user.component.html',\n  styleUrls: ['./list-user.component.css']\n})\nexport class ListUserComponent {\n\n  dataSource: MatTableDataSource<User>;\n  displayedColumns = ['userId', 'firstName', 'lastName', 'username', 'edit', 'delete'];\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(private router: Router, private userSvc: UserService) {\n      this.populateUserTable();\n  }\n\n  private populateUserTable() {\n    const users: User[] = [];\n      this.userSvc.getUsers()\n        .subscribe(usrs => this.dataSource.data = usrs);\n      this.dataSource = new MatTableDataSource(users);\n  }\n\n  /**\n   * Set the paginator and sort after the view init since this component will\n   * be able to query its view for the initialized paginator and sort.\n   */\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  deleteUser(user: User): void {\n    this.userSvc.deleteUser(user)\n      .subscribe(\n        data => {\n          this.populateUserTable();\n          console.log(`LstUsr:delete ${data} usrId : ` + user.userId);\n          this.router.navigate(['list-user']);  // TODO test this.\n        }\n      );\n  }\n\n  editUser(user: User): void {\n    console.log('ListUsr:editUser userId >' + user.userId + '<');\n    localStorage.removeItem('editUserId');\n    if (user.userId !== undefined) {\n      localStorage.setItem('editUserId', user.id);\n    }\n    this.router.navigate(['edit-user']);\n  }\n\n  addUser(): void {\n    this.router.navigate(['add-user']);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Router } from '@angular/router';\nimport { CanActivate } from '@angular/router/src/interfaces';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router/src/router_state';\n\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\n\n  constructor(private router: Router) {}\n\n  // Check if the user is logged in before calling http\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> | Promise<boolean> | boolean {\n    if (localStorage.getItem('currentUser')) {\n      return true;\n    }\n    this.router.navigate(['/login'],\n      {\n        queryParams: { returnUrl: state.url }\n      }\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { tap, catchError } from 'rxjs/operators';\nimport { User } from '../model/user';\nimport { of, Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private loginUrl = 'api/user/login';\n  private _loggedInUser?: User; // 2018-12-24\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  getHeaders(): { headers: HttpHeaders } {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n      })\n    };\n    return httpOptions;\n  }\n\n  get loggedInUser(): User {\n    return this._loggedInUser;\n  }\n  set loggedInUser(user: User) {\n      this._loggedInUser = user;\n  }\n\n  login(username: string, password: string) {\n\n    return this.http.post<User>(this.loginUrl, JSON.stringify({ username: username, password: password }), this.getHeaders())\n      .pipe(\n        tap(\n          (user: User) => {\n            console.log('Login: You are trying to log in as ' + username + ' pw  ' + password + ' null data? ' + (user === null) +\n            ' undefined?? ' + (user === undefined) + '!! ??? ' + ((user == null) || (user === undefined)));\n            if (\n              (user == null) ||\n              (user === undefined)\n            ) {\n              this.router.navigate(['login']);\n            } else {\n              this.log(`Logged in user username=${username} password${password}`);\n              localStorage.setItem('currentUser', JSON.stringify(user));\n            }\n          }\n        ),\n        catchError(this.handleError<User>('login'))\n      );\n  }\n\n  logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    console.log('AuthSvc: logout currentUser ' + localStorage.getItem('currentUser'));\n    this.loggedInUser = null; // 2018-12-24\n  }\n\n  private log(message: string) {\n    console.log('authSvc : ' + message + '');\n  }\n\n  public getToken(): string {\n    const currentUser = JSON.parse(localStorage.getItem('currentUser'));\n    const token = currentUser && currentUser.token;\n    return token ? token : '';\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      if (error.status === 401) {\n        localStorage.removeItem('currentUser');\n        this.router.navigateByUrl('/login');\n        console.log('@@@@@ Authentication error');\n      } else if (error.status === 403) {\n        console.log('%%%% Duplicate user error');\n      } else if (error.status === 500) {\n        console.log('#### Error 500 happened. Ooops!');\n      }\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  // https://itnext.io/angular-tutorial-implement-refresh-token-with-httpinterceptor-bfa27b966f57\n  refreshAccessToken() { this.log('Refresh token called. Not yet implemented!'); }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { User } from '../model/user';\nimport { AuthService } from './auth.service';\nimport { Observable, of } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private usrUrl = 'api/user';\n\n  constructor(\n    private http: HttpClient,\n    private authSvc: AuthService\n  ) {}\n\n  getHeaders(): { headers: HttpHeaders } {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n        'Authorization': 'Bearer ' + this.authSvc.getToken()\n      })\n    };\n    return httpOptions;\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.usrUrl, this.getHeaders())\n    .pipe(\n      tap(users => this.log(`Fetched all ${users.length} users.`)),\n      catchError(this.handleError('getUsers', []))\n    );\n  }\n\n  deleteUser(user: User | number): Observable<User> {\n    const id = typeof user === 'number' ? user : user.id;\n    const url = `${this.usrUrl}/${id}`;\n\n    return this.http.delete<User>(url, this.getHeaders()).pipe(\n      tap(_ => this.log(`Deleted user userId=${id}`)),\n      catchError(this.handleError<User>('deleteUser'))\n    );\n  }\n\n  getUser(id: string): Observable<User> {\n    const url = `${this.usrUrl}/${id}`;\n    return this.http.get<User>(url, this.getHeaders()).pipe(\n      tap(_ => this.log(`Fetched one user id=${id}`)),\n      catchError(this.handleError<User>(`getUser id=${id}`))\n    );\n  }\n\n  getUserByUsername(username: string): Observable<User> {\n    const url = `${this.usrUrl}/username/${username}`;\n    return this.http.get<User>(url, this.getHeaders())\n      .pipe(\n        tap(_ => this.log(`Fetched user by username=${username}`)),\n        catchError(this.handleError<User>(`getUserByUsername username=${username}`))\n      );\n  }\n\n  updateUser(user: User): Observable<any> {\n    return this.http.put(this.usrUrl, user, this.getHeaders()).pipe(\n      tap(_ => this.log(`Updated user userId=${user.userId}`)),\n      catchError(this.handleError<any>('updateUser'))\n    );\n  }\n\n  addUser(user: User): Observable<User> {\n    return this.http.post<User>(this.usrUrl, user, this.getHeaders()).pipe(\n      tap((usr: User) => this.log(`Added user w/ userId=${usr.userId}`)),\n      catchError(this.handleError<User>('addUser'))\n    );\n  }\n\n  /* GET users whose name contains search term */ // TODO Test and use this\n  searchUsers(term: string): Observable<User[]> {\n    if (!term.trim()) {\n      // if not search term, return empty user array.\n      return of([]);\n    }\n    return this.http.get<User[]>(this.usrUrl + `/search?name=${term}`, this.getHeaders()).pipe(\n      tap(_ => this.log(`Found user(s) matching \"${term}\"`)),\n      catchError(\n        this.handleError<User[]>('searchUsers', [])\n      )\n    );\n  }\n\n  private log(message: string) {\n    console.log('usrSvc : ' + message + '');\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      if (error.status === 401) {\n        localStorage.removeItem('currentUser');\n        // this.router.navigateByUrl('/login');\n        console.log('@@@@@ Trapped authentication error');\n      } else if (error.status === 403) {\n        console.log('%%%% Trapped duplicate user error');\n      } else if (error.status === 500) {\n        console.log('#### Error 500 happened. Ooops!');\n      }\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\r\n\r\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\r\n    return (control: AbstractControl): {[key: string]: any} => {\r\n        const forbidden = nameRe.test(control.value);\r\n        return forbidden ? {'forbiddenName': {value: control.value}} : null;\r\n    };\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'hammerjs';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error('Main: >>> : ' + err));\n"],"sourceRoot":""}